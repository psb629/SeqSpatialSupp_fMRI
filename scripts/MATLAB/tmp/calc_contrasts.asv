function con = calc_contrasts(R)
    valid_idx = [2:17 19:34 36:51 53:68]; % trial numbers for repetition suppression effects + 1
    invalid_idx = [1 18 35 52];
    con = zeros(2,prod(size(R.cond)));

    for r=1:size(R.tS,1)
        for t=1:size(R.tS,2)-1
            transition(r, t,:) = [floor(R.tS(r,t)/2) mod(R.tS(r,t),2) floor(R.tS(r,t+1)/2) mod(R.tS(r,t+1),2)];

            % if ismember(t, valid_idx)
            %     transition(r, t,:) = [floor(R.tS(r,valid_idx(t)-1)/2) mod(R.tS(r,t-1),2) floor(R.tS(r,t)/2) mod(R.tS(r,t),2)];
        end
            rep_motor1{r} = find(transition(r,:,1)==transition(r,:,3)) + 1;  % first motor repetition index
            rep_motor2{r} = rep_motor1{r}(find(diff(rep_motor1{r})==1)+1);  % second motor repetition index
            rep_motor1{r} = rep_motor1{r}(ismember(rep_motor1{r},valid_idx));
            rep_motor2{r} = rep_motor2{r}(ismember(rep_motor2{r},valid_idx));

            rep_cue1{r} = find(transition(r,:,2)==transition(r,:,4)) + 1;  
            rep_cue2{r} = rep_cue1{r}(find(diff(rep_cue1{r})==1)+1);  % second motor repetition index
            rep_cue1{r} = rep_cue1{r}(ismember(rep_cue1{r},valid_idx));
            rep_cue2{r} = rep_cue2{r}(ismember(rep_cue2{r},valid_idx));

            rep_motor_cue1{r} = find(transition(r,:,1)==transition(r,:,3) & transition(r,:,2)==transition(r,:,4));
            rep_motor_cue2{r} = rep_motor_cue1{r}(find(diff(rep_motor_cue1{r})==1)+1);  % second motor repetition index
            rep_motor_cue1{r} = rep_motor_cue1{r}(ismember(rep_motor_cue1{r},valid_idx));
            rep_motor_cue2{r} = rep_motor_cue2{r}(ismember(rep_motor_cue2{r},valid_idx));

            nrep_motor{r} = find(transition(r,:,1)~=transition(r,:,3)) + 1;  % first motor non-repetition index
            nrep_motor{r} = nrep_motor{r}(ismember(nrep_motor{r},valid_idx));

            nrep_cue{r} = find(transition(r,:,2)~=transition(r,:,4)) + 1;  
            nrep_cue{r} = nrep_cue{r}(ismember(nrep_cue{r},valid_idx));

            % con(1,rep_motor1{r}+(r-1)*size(R.tS,2)) = 1;
            % con(1,nrep_motor{r}+(r-1)*size(R.tS,2)) = -1;
            % 
            % con(2,rep_cue1{r}+(r-1)*size(R.tS,2)) = 1;
            % con(2,nrep_cue{r}+(r-1)*size(R.tS,2)) = -1;

    end
    frint


    
function optC = calc_optCont(SPM, con)
% Calculate weighted design matrix by using a design matrix encoding every trial
% X: design matrix encoding every trial excluding offset regressors
% con: original contrast
optC = zeros(2,size(SPM.xX.X,2));
X = SPM.xX.X(:,1:end-length(SPM.nscan));
C_motor = zeros(size(X,2),length(find(unique(con)))); % Number of rows of design matrix

idx{1} = find(con(1,:)==1);
idx{2} = find(con(1,:)==-1);
idx{3} = find(con(1,:)==0);

for i=1:length(idx)
    C_motor(idx{i},i)=1;
end


C = C_motor;
optW(1,:,:)  = inv(C'*X'*X*C)*C'*X'*X;
optC(1,1:size(X,2))=squeeze(optW(1,1,:)-optW(1,2,:));


idx{1} = find(con(2,:)==1);
idx{2} = find(con(2,:)==-1);
idx{3} = find(con(2,:)==0);

for i=1:length(idx)
    C_cue(idx{i},i)=1;
end



C = C_cue;
optW(2,:,:) = inv(C'*X'*X*C)*C'*X'*X;
optC(2,1:1:size(X,2))=squeeze(optW(2,1,:)-optW(2,2,:));
